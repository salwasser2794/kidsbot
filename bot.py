import asyncio
import json
import random
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π ===
with open("users.json", "r", encoding="utf-8") as f:
    users = json.load(f)

def save_users():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ users.json (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∫–∏)"""
    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def get_profile(user_id: int):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ user_id"""
    return users.get(str(user_id))

def days_until(date_str: str) -> int:
    """–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –¥–∞—Ç—ã"""
    today = datetime.today().date()
    target = datetime.strptime(date_str, "%Y-%m-%d").date()
    delta = (target - today).days
    return delta if delta >= 0 else (target.replace(year=today.year + 1) - today).days

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –ò–≥—Ä—ã –∏ –∑–∞–¥–∞–Ω–∏—è", callback_data="tasks")],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç", callback_data="fact")],
        [InlineKeyboardButton(text="üòÇ –ê–Ω–µ–∫–¥–æ—Ç", callback_data="joke")],
        [InlineKeyboardButton(text="üìÖ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ...", callback_data="days")],
        [InlineKeyboardButton(text="üèÜ –ú–æ–∏ –æ—á–∫–∏", callback_data="points")],
        [InlineKeyboardButton(text="üôã –ö—Ç–æ —è", callback_data="whoami")]
    ])

def days_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ê–ª–∏—Å—ã", callback_data="days_alice")],
        [InlineKeyboardButton(text="üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –†—É—Å–ª–∞–Ω–∞", callback_data="days_ruslan")],
        [InlineKeyboardButton(text="üéÑ –ù–æ–≤—ã–π –≥–æ–¥", callback_data="days_newyear")],
        [InlineKeyboardButton(text="‚òÄÔ∏è –ö–∞–Ω–∏–∫—É–ª—ã", callback_data="days_holidays")]
    ])

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ===
API_TOKEN = "YOUR_BOT_TOKEN"
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    profile = get_profile(message.from_user.id)
    if profile:
        await message.answer(
            f"{profile['greetings']}\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=main_menu()
        )
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢–µ–±—è —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é ü§î")

# "–ö—Ç–æ —è"
@dp.callback_query(F.data == "whoami")
async def who_am_i(callback: types.CallbackQuery):
    profile = get_profile(callback.from_user.id)
    if profile:
        text = (
            f"–¢—ã ‚Äî {profile['name']} üéâ\n"
            f"üìÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {profile['birthday']}\n"
            f"üéØ –û—á–∫–æ–≤: {profile['points']}\n"
            f"üí° –ù–∞–ø—Ä–∏–º–µ—Ä: {profile['facts'][0]}"
        )
        await callback.message.answer(text)
    await callback.answer()

# "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"
@dp.callback_query(F.data == "fact")
async def fact(callback: types.CallbackQuery):
    profile = get_profile(callback.from_user.id)
    if profile:
        fact = random.choice(profile["facts"])
        await callback.message.answer(fact)
    await callback.answer()

# "–ê–Ω–µ–∫–¥–æ—Ç"
@dp.callback_query(F.data == "joke")
async def joke(callback: types.CallbackQuery):
    profile = get_profile(callback.from_user.id)
    if profile:
        joke = random.choice(profile["jokes"])
        await callback.message.answer(joke)
    await callback.answer()

# "–ò–≥—Ä—ã –∏ –∑–∞–¥–∞–Ω–∏—è"
@dp.callback_query(F.data == "tasks")
async def task(callback: types.CallbackQuery):
    profile = get_profile(callback.from_user.id)
    if profile:
        task = random.choice(profile["tasks"])
        await callback.message.answer(task)
        # –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
        profile["points"] += 1
        save_users()
        await callback.message.answer(f"–¢—ã –ø–æ–ª—É—á–∏–ª 1 –æ—á–∫–æ! üéØ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {profile['points']}")
    await callback.answer()

# "–ú–æ–∏ –æ—á–∫–∏"
@dp.callback_query(F.data == "points")
async def points(callback: types.CallbackQuery):
    profile = get_profile(callback.from_user.id)
    if profile:
        await callback.message.answer(f"–£ —Ç–µ–±—è {profile['points']} –æ—á–∫–æ–≤ üéØ")
    await callback.answer()

# "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ..."
@dp.callback_query(F.data == "days")
async def days(callback: types.CallbackQuery):
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=days_menu())
    await callback.answer()

@dp.callback_query(F.data.startswith("days_"))
async def days_event(callback: types.CallbackQuery):
    data = callback.data

    if data == "days_alice":
        target = get_profile(123456789)["birthday"]
        text = f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ê–ª–∏—Å—ã üéÇ –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"
    elif data == "days_ruslan":
        target = get_profile(987654321)["birthday"]
        text = f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –†—É—Å–ª–∞–Ω–∞ üéÇ –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"
    elif data == "days_newyear":
        target = users["common_dates"]["new_year"]
        text = f"–î–æ –ù–æ–≤–æ–≥–æ –≥–æ–¥–∞ üéÑ –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"
    elif data == "days_holidays":
        target = users["common_dates"]["summer_holidays"]
        text = f"–î–æ –ª–µ—Ç–Ω–∏—Ö –∫–∞–Ω–∏–∫—É–ª ‚òÄÔ∏è –æ—Å—Ç–∞–ª–æ—Å—å {days_until(target)} –¥–Ω–µ–π!"

    await callback.message.answer(text)
    await callback.answer()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
